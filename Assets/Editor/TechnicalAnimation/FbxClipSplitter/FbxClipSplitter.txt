using UnityEditor;
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class FbxClipSplitter : EditorWindow
{
    private List<FBXEntry> fbxEntries = new List<FBXEntry>();
    private Vector2 scrollPos;
    private string lastUsedPath = "Assets";
    private Texture2D headerTexture;
    private bool textureLoaded = false;

    [MenuItem("Tools/Animation/FBX Clip Splitter")]
    private static void ShowWindow()
    {
        var window = GetWindow<FbxClipSplitter>("FBX Clip Splitter");
        window.InitializeWithSelection();
        window.Show();
    }

    [MenuItem("Assets/Animation/FBX Clip Splitter", false, 31)]
    private static void ExtractFromContextMenu()
    {
        var window = GetWindow<FbxClipSplitter>("FBX Clip Splitter");
        window.InitializeWithSelection();
        window.Show();
    }

    [MenuItem("Assets/Animation/FBX Clip Splitter", true)]
    private static bool ValidateExtractFromContextMenu()
    {
        return Selection.activeObject != null;
    }

    private void OnGUI()
    {
        HandleDragAndDrop(); // 优先处理拖拽事件

        EditorGUILayout.Space();

        // 加载图片（仅在第一次时加载）
        if (!textureLoaded)
        {
            string scriptPath = AssetDatabase.GetAssetPath(MonoScript.FromScriptableObject(this));
            string directory = Path.GetDirectoryName(scriptPath);
            string imagePath = Path.Combine(directory, "FbxClipSplitter.png");
            
            headerTexture = AssetDatabase.LoadAssetAtPath<Texture2D>(imagePath);
            textureLoaded = true;
        }
        
        // 显示图片（如果加载成功）
        if (headerTexture != null)
        {
            // 计算缩放比例（保持宽高比）
            float aspectRatio = (float)headerTexture.height / headerTexture.width;
            float imageHeight = position.width * aspectRatio;
            
            Rect imageRect = GUILayoutUtility.GetRect(position.width, imageHeight);
            GUI.DrawTexture(imageRect, headerTexture, ScaleMode.ScaleToFit);
        }
        else
        {
            // 备用文字标题
            GUILayout.Label("FBX Clip Splitter - Feifan.jiao", EditorStyles.boldLabel);
        }
        EditorGUILayout.Space();

        DrawToolbar();
        DrawFBXList();
    }

    private void HandleDragAndDrop()
    {
        // 整个窗口作为拖拽区域
        Rect dropArea = new Rect(0, 0, position.width, position.height);
        Event evt = Event.current;

        switch (evt.type)
        {
            case EventType.DragUpdated:
                if (dropArea.Contains(evt.mousePosition))
                {
                    bool containsValidFiles = DragAndDrop.objectReferences.Any(IsValidDragObject);
                    DragAndDrop.visualMode = containsValidFiles ? DragAndDropVisualMode.Copy : DragAndDropVisualMode.Rejected;
                    evt.Use();
                }
                break;

            case EventType.DragPerform:
                if (dropArea.Contains(evt.mousePosition))
                {
                    DragAndDrop.AcceptDrag();
                    ProcessDroppedItems(DragAndDrop.objectReferences);
                    evt.Use();
                }
                break;
        }
    }

    private bool IsValidDragObject(Object obj)
    {
        string path = AssetDatabase.GetAssetPath(obj);
        return (obj is GameObject && Path.GetExtension(path).ToLower() == ".fbx") ||
               (obj is DefaultAsset && Directory.Exists(path));
    }

    private void ProcessDroppedItems(Object[] droppedObjects)
    {
        foreach (var obj in droppedObjects)
        {
            string path = AssetDatabase.GetAssetPath(obj);
            
            if (obj is GameObject && Path.GetExtension(path).ToLower() == ".fbx")
            {
                AddFBXEntry(obj, true);
            }
            else if (obj is DefaultAsset && Directory.Exists(path))
            {
                // 修复点：确保正确处理文件夹路径
                string dataPath = Application.dataPath;
                string folderFullPath = Path.GetFullPath(path);
                
                // 获取文件夹内所有FBX（包括子目录）
                var fbxFiles = Directory.GetFiles(folderFullPath, "*.fbx", SearchOption.AllDirectories)
                    .Where(p => !p.EndsWith(".meta"));

                foreach (var file in fbxFiles)
                {
                    // 转换为Unity相对路径
                    string relativePath = "Assets" + file.Substring(dataPath.Length);
                    var fbxObj = AssetDatabase.LoadAssetAtPath<GameObject>(relativePath);
                    if (fbxObj != null) AddFBXEntry(fbxObj, true);
                }
            }
        }
    }

    private void ProcessFBXFolder(string folderPath)
    {
        var fbxFiles = Directory.GetFiles(folderPath, "*.fbx", SearchOption.AllDirectories)
            .Where(p => !p.EndsWith(".meta"));

        foreach (var file in fbxFiles)
        {
            string relativePath = "Assets" + file.Substring(Application.dataPath.Length);
            var fbxObj = AssetDatabase.LoadAssetAtPath<GameObject>(relativePath);
            if (fbxObj != null) AddFBXEntry(fbxObj, true);
        }
    }

    private void InitializeWithSelection()
    {
        var selectedObjects = Selection.GetFiltered(typeof(GameObject), SelectionMode.Assets)
            .Where(x => Path.GetExtension(AssetDatabase.GetAssetPath(x)).ToLower() == ".fbx")
            .ToArray();

        foreach (var obj in selectedObjects)
        {
            AddFBXEntry(obj, true);
        }
    }

    private void DrawToolbar()
    {
        EditorGUILayout.BeginHorizontal();
        {
            if (GUILayout.Button("Add FBX", GUILayout.Width(100)))
            {
                var paths = EditorUtility.OpenFilePanelWithFilters("Select FBX Files", lastUsedPath, 
                    new[] { "FBX Files", "fbx" });
                
                if (!string.IsNullOrEmpty(paths))
                {
                    lastUsedPath = Path.GetDirectoryName(paths);
                    string relativePath = "Assets" + paths.Substring(Application.dataPath.Length);
                    var obj = AssetDatabase.LoadAssetAtPath<GameObject>(relativePath);
                    if (obj != null) AddFBXEntry(obj, true);
                }
            }

            if (GUILayout.Button("Add Folder", GUILayout.Width(100)))
            {
                var path = EditorUtility.OpenFolderPanel("Select Folder with FBX Files", lastUsedPath, "");
                if (!string.IsNullOrEmpty(path))
                {
                    lastUsedPath = path;
                    ProcessFBXFolder(path);
                }
            }

            if (GUILayout.Button("Clear All", GUILayout.Width(100)))
            {
                fbxEntries.Clear();
            }

            GUI.enabled = fbxEntries.Count > 0;
            if (GUILayout.Button("Extract All", GUILayout.Width(100)))
            {
                ExtractAllAnimations();
            }
            GUI.enabled = true;
        }
        EditorGUILayout.EndHorizontal();
    }

    private void DrawFBXList()
    {
        scrollPos = EditorGUILayout.BeginScrollView(scrollPos);
        {
            for (int i = 0; i < fbxEntries.Count; i++)
            {
                EditorGUILayout.BeginVertical(EditorStyles.helpBox);
                {
                    EditorGUILayout.BeginHorizontal();
                    {
                        fbxEntries[i].fbxObject = EditorGUILayout.ObjectField(
                            fbxEntries[i].fbxObject, typeof(GameObject), false) as GameObject;

                        if (GUILayout.Button("×", GUILayout.Width(20)))
                        {
                            fbxEntries.RemoveAt(i);
                            EditorGUILayout.EndHorizontal();
                            EditorGUILayout.EndVertical();
                            break;
                        }
                    }
                    EditorGUILayout.EndHorizontal();

                    if (fbxEntries[i].fbxObject != null)
                    {
                        EditorGUI.indentLevel++;
                        
                        EditorGUILayout.BeginHorizontal();
                        {
                            fbxEntries[i].outputPath = EditorGUILayout.TextField("Output Path", fbxEntries[i].outputPath);
                            if (GUILayout.Button("...", GUILayout.Width(30)))
                            {
                                string fullPath = Path.Combine(Application.dataPath, fbxEntries[i].outputPath.Replace("Assets/", ""));
                                string newPath = EditorUtility.SaveFolderPanel("Select Output Folder", fullPath, "");
                                if (!string.IsNullOrEmpty(newPath))
                                {
                                    fbxEntries[i].outputPath = "Assets" + newPath.Substring(Application.dataPath.Length);
                                }
                            }
                        }
                        EditorGUILayout.EndHorizontal();

                        var clips = fbxEntries[i].animationClips;
                        if (clips != null && clips.Count > 0)
                        {
                            EditorGUILayout.LabelField("Animation Clips:", EditorStyles.boldLabel);
                            foreach (var clip in clips)
                            {
                                EditorGUILayout.BeginHorizontal();
                                {
                                    clip.include = EditorGUILayout.ToggleLeft(clip.clipName, clip.include, GUILayout.Width(200));
                                }
                                EditorGUILayout.EndHorizontal();
                            }
                        }
                        else
                        {
                            EditorGUILayout.HelpBox("No animation clips found in this FBX", MessageType.Info);
                        }

                        EditorGUI.indentLevel--;
                    }
                }
                EditorGUILayout.EndVertical();
                EditorGUILayout.Space();
            }
        }
        EditorGUILayout.EndScrollView();
    }

    private void AddFBXEntry(Object fbxObject, bool autoLoadClips = false)
    {
        if (fbxObject == null) return;

        var path = AssetDatabase.GetAssetPath(fbxObject);
        if (Path.GetExtension(path).ToLower() != ".fbx") return;

        var entry = new FBXEntry
        {
            fbxObject = fbxObject as GameObject,
            outputPath = Path.GetDirectoryName(path),
            animationClips = new List<ClipInfo>()
        };

        if (!fbxEntries.Any(x => AssetDatabase.GetAssetPath(x.fbxObject) == path))
        {
            fbxEntries.Add(entry);
            if (autoLoadClips)
            {
                LoadClipsForEntry(entry);
            }
        }
    }

    private void LoadClipsForEntry(FBXEntry entry)
    {
        if (entry.fbxObject == null) return;

        var path = AssetDatabase.GetAssetPath(entry.fbxObject);
        var allClips = AssetDatabase.LoadAllAssetsAtPath(path)
            .Where(x => x is AnimationClip)
            .Cast<AnimationClip>()
            .Where(x => !x.name.StartsWith("preview_") && 
                       !x.name.StartsWith("__preview__") && 
                       !x.name.EndsWith("_preview"))
            .ToList();

        entry.animationClips = allClips.Select(clip => new ClipInfo
        {
            clip = clip,
            clipName = clip.name,
            include = true
        }).ToList();
    }

    private void ExtractAllAnimations()
    {
        try
        {
            AssetDatabase.StartAssetEditing();

            int totalClips = 0;
            foreach (var entry in fbxEntries)
            {
                if (entry.fbxObject == null || entry.animationClips == null) continue;

                if (!Directory.Exists(entry.outputPath))
                {
                    Directory.CreateDirectory(entry.outputPath);
                }

                foreach (var clipInfo in entry.animationClips)
                {
                    if (!clipInfo.include) continue;

                    var newClip = new AnimationClip();
                    EditorUtility.CopySerialized(clipInfo.clip, newClip);

                    var clipName = $"{entry.fbxObject.name}_{clipInfo.clipName}".Replace(" ", "_");
                    var assetPath = $"{entry.outputPath}/{clipName}.anim";
                    assetPath = AssetDatabase.GenerateUniqueAssetPath(assetPath);

                    AssetDatabase.CreateAsset(newClip, assetPath);
                    totalClips++;
                }
            }

            EditorUtility.DisplayDialog("Success", 
                $"Extracted {totalClips} animation clips from {fbxEntries.Count} FBX files", 
                "OK");
        }
        finally
        {
            AssetDatabase.StopAssetEditing();
            AssetDatabase.Refresh();
        }
    }

    private class FBXEntry
    {
        public GameObject fbxObject;
        public string outputPath;
        public List<ClipInfo> animationClips;
    }

    private class ClipInfo
    {
        public AnimationClip clip;
        public string clipName;
        public bool include;
    }
}